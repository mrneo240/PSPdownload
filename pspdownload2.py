#!/usr/bin/python
""" pspdownload2.py --

 UI generated by GUI Builder Build 146 on 2018-03-19 21:37:39 from:
    F:/VITA/PSPdownload/pspdownload2.ui
 This file is auto-generated.  Only the code within
    '# BEGIN USER CODE (global|class)'
    '# END USER CODE (global|class)'
 and code inside the callback subroutines will be round-tripped.
 The 'main' function is reserved.
"""
import tkinter
from tkinter import *
import tkinter.messagebox
from tkinter.ttk import Progressbar
from pspdownload2_ui import Pspdownload2
from functions import *
from GUI_main import *

# BEGIN USER CODE global
class ProgressWindow:
    def __init__(self,master):
        self.master = master
        self.frame = tkinter.Frame(self.master)
        self.frame.winfo_toplevel().title("Downloading")
        self.info = tkinter.Label(self.frame,text="0/0 MB",width=30)
        self.info.pack()
        self.progressbar = Progressbar(self.frame, orient="horizontal", length=250, mode="determinate")
        self.progressbar.pack()
        self.frame.pack()
        set_tk_window(self)

    def close_window(self):
        self.destroy()

    def start(self,clevel,tid,filetype):
        self.progressbar["value"] = 0
        self.progressbar["maximum"] = 100 

        dl = process_dl(get_games_obj(), filetype, clevel, tid, get_p2z_obj())
        self.master.destroy()
        if dl == None:
            tkinter.messagebox.showinfo("Error", "Incorrect title ID or link is not in database")
        tkinter.messagebox.showinfo("Success!", "Download finished")    
        

    def update_bar(self,downloaded, total):
        self.progressbar["value"] = downloaded/1024/1024
        self.progressbar["maximum"] = total/1024/1024
        self.info['text'] = '%d/%d MB' % (downloaded/1024/1024,total/1024/1024)  
        if downloaded == total:
            self.info['text'] = "Finished! Now Converting..."
        self.master.update_idletasks()
        self.master.update()
# END USER CODE global

class CustomPspdownload2(Pspdownload2):
    pass

    # BEGIN CALLBACK CODE
    # ONLY EDIT CODE INSIDE THE def FUNCTIONS.

    # _listbox_1_xscrollcommand --
    #
    # Callback to handle _listbox_1 widget option -xscrollcommand
    def _listbox_1_xscrollcommand(self, *args):
        pass

    # _listbox_1_yscrollcommand --
    #
    # Callback to handle _listbox_1 widget option -yscrollcommand
    def _listbox_1_yscrollcommand(self, *args):
        pass

    # _scale_2_command --
    #
    # Callback to handle _scale_2 widget option -command
    def _scale_2_command(self, *args):
        pass

    # _scrollbar_2_command --
    #
    # Callback to handle _scrollbar_2 widget option -command
    def _scrollbar_2_command(self, *args):
        pass

    # download_btn_command --
    #
    # Callback to handle download_btn widget option -command
    def download_btn_command(self, *args):
        self.newWindow = tkinter.Toplevel(self.root)
        self.app = ProgressWindow(self.newWindow)

        item = self._listbox_1.curselection()
        clevel = self.compressionVar.get()
        tid = self.results[item[0]]["Title ID"].upper()
        filetype = self.formatVar.get().lower() #[0]
        self.app.start(clevel,tid,filetype)
        pass

    # search_btn_command --
    #
    # Callback to handle search_btn widget option -command
    def search_btn_command(self, *args):
        self._listbox_1.delete(0,tkinter.END)
        self.results = []
        self.results = search_list(get_games_obj(),self.entryVar.get().lower())
        if self.results == []:
            self._listbox_1.insert(tkinter.END,"No Results found")
            self.download_btn["state"]=tkinter.DISABLED
        else:
           for game in self.results:
                self._listbox_1.insert(tkinter.END, "{}, {}, {}, {:.2f} MB".format(game['Title ID'],game['Region'],game["Name"],int((game["File Size"] if len(game["File Size"]) else 0))/1024/1024))
           self.download_btn["state"]=tkinter.NORMAL

        pass

    # _spinbox_2_command --
    #
    # Legacy command found in callback code. Add user comments inside body.
    def _ComboBox_1_command(self, *args):
        if self.formatVar.get()[0].lower() == 'c':
            self._scale_2["state"]=tkinter.NORMAL
        else:
            self._scale_2["state"]=tkinter.DISABLED
            self._scale_2.set(0)
        pass

    # END CALLBACK CODE

    # BEGIN USER CODE class
def userinit():
    init_program()
    # END USER CODE class

def main():
    # Standalone Code Initialization
    # DO NOT EDIT
    #try: userinit()
    #except NameError: pass
    userinit()
    root = Tk()
    demo = CustomPspdownload2(root)
    root.title('PSPDownload')
    try: run()
    except NameError: pass
    root.protocol('WM_DELETE_WINDOW', root.quit)
    root.mainloop()

if __name__ == '__main__': main()
